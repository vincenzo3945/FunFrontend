{"version":3,"sources":["resources/building.png","resources/clock.png","resources/calendar.png","resources/plane.png","resources/account.png","App.js","Home.js","Beschikbaarheid.js","Rooster.js","Verlof.js","Account.js","Groepsrooster.js","index.js"],"names":["module","exports","user_name","pass_word","user","userID","old_password","new_password","confirmed_new_password","cookie","Cookies","LoggedInUser","personId","firstName","lastName","emailAddress","age","address","houseNumber","zipcode","city","Country","token","App","redirectTo","props","history","push","pathname","Login","uname","pword","console","log","alert","LoginModel","username","password","Axios","post","then","response","data","window","localStorage","setItem","JSON","stringify","set","get","catch","error","bind","LoginInfo","document","getElementById","value","this","className","class","id","name","type","placeholder","required","pattern","onClick","React","Component","withRouter","moment","require","workDayList","workDayId","workDate","beginTime","endTime","currentDate","format","workDateString","weekday","week","verlofList","beginDate","endDate","routing","ReactDOM","render"],"mappings":"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","file":"static/js/main.115dfbd4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/building.b80a4a2e.png\";","module.exports = __webpack_public_path__ + \"static/media/clock.aa482cab.png\";","module.exports = __webpack_public_path__ + \"static/media/calendar.433b4564.png\";","module.exports = __webpack_public_path__ + \"static/media/plane.62cfb823.png\";","module.exports = __webpack_public_path__ + \"static/media/account.047a99af.png\";","import React from 'react';\r\n//import {Redirect} from 'react-router-dom';\r\n//import {Redirect} from 'react-router';\r\nimport {withRouter} from 'react-router-dom';\r\n//import ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './scripts';\r\nimport './loginScript';\r\n\r\n\r\n\r\n//Rest\r\nimport Axios from \"axios\";\r\n\r\n//Bootstrap\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\r\n\r\nimport {Cookies} from \"react-cookie\";\r\n\r\nconst cookie = new Cookies();\r\n\r\nvar user_name;\r\nvar pass_word;\r\n\r\n//const state = {redirect: false}\r\n\r\n\r\n\r\nvar LoggedInUser = {\r\n    personId: null,\r\n    firstName: null,\r\n    lastName: null,\r\n    emailAddress: null,\r\n    age: null,\r\n    address: null,\r\n    houseNumber: null,\r\n    zipcode: null,\r\n    city: null,\r\n    Country: null,\r\n    token: null\r\n}\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n    constructor(){\r\n        super()\r\n        this.redirectTo = this.redirectTo.bind(this);\r\n        this.Login = this.Login.bind(this);\r\n        this.LoginInfo = this.LoginInfo.bind(this);\r\n    }\r\n\r\n    redirectTo = () =>{\r\n        this.props.history.push({pathname: \"/Home\"});\r\n    }\r\n\r\n    LoginInfo() {\r\n        user_name = document.getElementById(\"username\").value;\r\n        pass_word = document.getElementById(\"password\").value;\r\n        console.log(user_name);\r\n        console.log(pass_word);\r\n        this.Login(user_name, pass_word);\r\n    }\r\n\r\n   \r\n\r\n    Login = (uname, pword) => {\r\n\r\n        console.log(uname);\r\n    \r\n        if(!uname)\r\n        {\r\n            alert(\"Username is empty\")\r\n        }\r\n        if(!pword)\r\n        {\r\n            alert(\"Password is empty\")\r\n        }\r\n        else\r\n        {\r\n            const LoginModel = {\r\n                username: uname,\r\n                password: pword,\r\n            }\r\n    \r\n            Axios.post('http://localhost:4567/user/login', {\r\n            username: LoginModel.username,\r\n            password: LoginModel.password,\r\n        })\r\n            .then((response) => {\r\n                console.log(response);\r\n                if(response.data)\r\n                {\r\n                    LoggedInUser = response.data;\r\n\r\n                    window.localStorage.setItem(\"user\", JSON.stringify(LoggedInUser));\r\n\r\n                    console.log(LoggedInUser)\r\n\r\n                    cookie.set(\"token\",LoggedInUser.token);\r\n                    console.log(cookie.get('token'));\r\n            \r\n\r\n                    console.log(LoggedInUser.firstName)\r\n                    this.redirectTo()\r\n                    //alert(\"Login successful\")\r\n                }\r\n            })\r\n        \r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n        } \r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <view>\r\n\r\n                <div>\r\n                    <div className=\"header\">\r\n                        <h1 class=\"removeWhiteSpace\">Welkom to CEAS (Company and Employee Administration Software)</h1>\r\n                 \r\n                    </div>\r\n\r\n                    <div id=\"input-center\" class=\"input-center\">\r\n\r\n                        <div className=\"login-center\">\r\n                            <p>Login</p>\r\n                        </div>\r\n\r\n                        <div className=\"text-input\">\r\n                            {/*<label className=\"UnamePadding\">Username</label>*/}\r\n                            <input name=\"username\" type=\"username\" placeholder=\"Enter username\" class=\"text-line\" id=\"username\" required pattern=\"\\S+\"></input> {/*pattern = cant have white space*/}\r\n                        </div>\r\n\r\n                        <br></br>\r\n\r\n                        <div className=\"text-input\">\r\n                            {/*<label className=\"PwordPadding\">Password</label>*/}\r\n                            <input name=\"password\" type=\"password\" placeholder=\"Enter password\" class=\"text-line\" id=\"password\" required pattern=\"\\S+\"></input> \r\n                        </div>\r\n                        <div className=\"login-center\">\r\n                            {//<button type=\"button\" className=\"login-button\" onClick = {function(event) {login_info()}}>Login </button>*/\r\n                                //<button type=\"button\" className=\"login-button\" onClick={function () { alert('Dit is een login button'); }}>Login </button>*/\r\n                                //<button type=\"button\" className=\"login-button\" onClick=\"loginInfo()\" id=\"loginButton\">Login </button>*/\r\n                            }\r\n                            <button type=\"button\" className=\"login-button\" onClick={this.LoginInfo}>Login</button>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <footer>\r\n                    <p className=\"footer-text\">Created by Vincenzo Salden      -    Semester 4 Fun project </p>\r\n                </footer>\r\n\r\n            </view>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(App);\r\n","import React from \"react\";\r\nimport  { Redirect } from 'react-router-dom'\r\n\r\nimport homeImage from \"./resources/building.png\";\r\nimport beschikbaarheidImage from \"./resources/clock.png\";\r\nimport groepsRoosterImage from \"./resources/calendar.png\";\r\nimport verlofImage from \"./resources/plane.png\";\r\nimport accountImage from \"./resources/account.png\";\r\n\r\nimport {Cookies} from \"react-cookie\";\r\n\r\nconst cookie = new Cookies();\r\n\r\nvar user;\r\n\r\nclass Home extends React.Component\r\n{\r\n\r\n    constructor(){\r\n        super()\r\n        this.redirectTo = this.redirectTo.bind(this);\r\n        this.logout = this.logout.bind(this);\r\n        this.redirect = false;\r\n        this.check();\r\n    }\r\n\r\n    check(){\r\n        if((!window.localStorage.user))\r\n        {\r\n            this.redirect = true;\r\n            \r\n            //props.history.push({pathname: \"/\"});\r\n        }\r\n        else\r\n        {\r\n        user = JSON.parse(window.localStorage.user);\r\n\r\n        console.log(user.personId);\r\n\r\n        console.log(user);\r\n        console.log(cookie.get('token'));\r\n        console.log(user.token);\r\n\r\n        if(user.token !== cookie.get('token'))\r\n        {\r\n            console.log(\"nope\");\r\n            this.redirect = true;\r\n        }\r\n        }\r\n    }\r\n\r\n    redirectTo = (path) =>{\r\n        this.props.history.push({pathname: \"/\"+path});\r\n    }\r\n\r\n    logout = () =>{\r\n        cookie.remove('token');\r\n        localStorage.clear();\r\n        this.redirectTo(\"\");\r\n    }\r\n\r\n    render() {\r\n\r\n        if(this.redirect)\r\n        {\r\n            return <Redirect push to='/' />\r\n        }\r\n        else\r\n        {\r\n            return(\r\n            \r\n                <view>\r\n                    <div className=\"topnavbar\">\r\n                        <div className=\"topnavbar-button\" className=\"whiteText\">\r\n                        <a id=\"hover\" onClick={ () => this.logout()}>Uitloggen</a>\r\n                            <a id=\"hover\" onClick={ () => this.redirectTo(\"account\")}>Account</a>\r\n                            <a id=\"hover\" onClick={ () => this.redirectTo(\"verlof\")}>Verlof</a>\r\n                            <a id=\"hover\" onClick={ () => this.redirectTo(\"groepsrooster\")}>Groepsrooster</a>\r\n                            <a id=\"hover\" onClick={ () => this.redirectTo(\"rooster\")}>Rooster</a>\r\n                            <a id=\"hover\" onClick={ () => this.redirectTo(\"beschikbaarheid\")}>Beschibaarheid</a>\r\n                            <a id=\"hover\" onClick={ () => this.redirectTo(\"home\")}>Home</a>  \r\n                        </div>    \r\n                    </div>\r\n                    \r\n                    <div className=\"row\"> \r\n                        <div className=\"item\">\r\n                            \r\n                            <a>\r\n                            <img src={homeImage} height=\"120\" width=\"120\" onClick={ () => this.redirectTo(\"home\")}></img>      \r\n                            </a> \r\n                            Home          \r\n                        </div>\r\n            \r\n                        <div className=\"item\">\r\n                            <a>\r\n                            <img src={beschikbaarheidImage} height=\"120\" width=\"120\" onClick={ () => this.redirectTo(\"beschikbaarheid\")}></img>\r\n                            </a>\r\n                            Beschikbaarheid\r\n                        </div>\r\n                        <div className=\"item\">\r\n                            <a>\r\n                            <img src={groepsRoosterImage} height=\"120\" width=\"120\" onClick={ () => this.redirectTo(\"groepsrooster\")}></img>               \r\n                            </a>\r\n                            Groepsrooster\r\n                        </div>\r\n                        <div className=\"item\">\r\n                            <a>\r\n                            <img src={verlofImage} height=\"120\" width=\"120\" onClick={ () => this.redirectTo(\"verlof\")}></img>                \r\n                            </a>\r\n                            Verlof\r\n                        </div>\r\n                        <div className=\"item\">\r\n                            <a>\r\n                            <img src={accountImage} height=\"120\" width=\"120\" onClick={ () => this.redirectTo(\"account\")}></img>                        \r\n                            </a>\r\n                            Account\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <footer>\r\n                        <p className=\"footer-text\">Created by Vincenzo Salden      -    Semester 4 Fun project </p>\r\n                    </footer>\r\n                    \r\n                </view>\r\n            )\r\n        }\r\n\r\n        \r\n    }\r\n}\r\n\r\nexport default Home\r\n\r\n","import React from \"react\";\r\nimport  { Redirect } from 'react-router-dom'\r\nimport Axios from \"axios\";\r\n\r\n\r\nimport {Cookies} from \"react-cookie\";\r\n\r\nconst cookie = new Cookies();\r\n\r\nvar moment = require('moment');\r\n//var formatDate = 0;\r\n\r\nvar workDayList = [{\r\n    workDayId: 1,\r\n    workDate: \"27-06-2019\",\r\n    beginTime: \"12:00\",\r\n    endTime: \"22:00\"\r\n},{\r\n    workDayId: 2,\r\n    workDate: \"28-06-2019\",\r\n    beginTime: \"15:00\",\r\n    endTime: \"01:00\"\r\n}\r\n];\r\n\r\n\r\nvar user;\r\n\r\nvar currentDate = moment().format(\"DD MMM\");\r\nvar workDate = moment().format(\"MM DD\");\r\nvar workDateString = currentDate;\r\nvar weekday = moment().week();\r\n\r\n//const state = {redirect: false}\r\n\r\n//const state = {workdayslist: []};\r\n\r\nclass Beschikbaarheid extends React.Component\r\n{\r\n    constructor(){\r\n        super()\r\n        \r\n        this.redirectTo = this.redirectTo.bind(this);\r\n        this.getSchedule = this.getSchedule.bind(this);\r\n        this.addWeekToDate = this.addWeekToDate.bind(this);\r\n        this.state = {date: this.workDateString};\r\n        this.loadSchedule = this.loadSchedule.bind(this);\r\n        this.workDayList = workDayList;\r\n        \r\n        this.redirect = false;\r\n        this.logout = this.logout.bind(this);\r\n\r\n        //Dates\r\n        this.formatDate = moment().format(\"DD MMM\");\r\n        this.workDateString = workDateString;\r\n        this.weekNumber = weekday;\r\n        this.workDate = workDate;\r\n\r\n        this.check();\r\n    }\r\n    \r\n    check(){\r\n        if(!window.localStorage.user)\r\n        {\r\n            this.props.history.push({pathname: \"/\"});\r\n            //props.history.push({pathname: \"/\"});\r\n        }\r\n        else\r\n        {\r\n            user = JSON.parse(window.localStorage.user);\r\n\r\n            ///Waarom type error bij deze if statement\r\n\r\n            console.log(user);\r\n            console.log(cookie.get('token'));\r\n            console.log(user.token);\r\n\r\n        if(user.token !== cookie.get('token'))\r\n        {\r\n            console.log(\"nope\");\r\n            this.redirect = true;\r\n        }\r\n        }\r\n    }\r\n\r\n    addWeekToDate = (date) =>\r\n    {\r\n        //console.log(currentDate + \" var\");\r\n        //this.workDate = moment(this.workDate).add('days', 7);\r\n        this.workDateString = moment(this.workDateString, \"DD MMM\").add('w', 1).format(\"DD MMM\");\r\n        //console.log(this.workDate + \" work\");\r\n        this.setState({date: this.workDateString});\r\n        console.log(this.workDateString + \" work string\");\r\n        //this.weekNumber = moment(this.workDateString, \"DD-MM-YYYY\").isoWeek();\r\n        //this.weekNumber = moment(this.weekNumber).add(\"w\",1).week();\r\n        this.weekNumber = moment().day(\"Monday\").week(this.weekNumber).add(\"w\", 1).week();\r\n        console.log(this.weekNumber);\r\n\r\n        this.getSchedule(this.weekNumber, user.personId)\r\n        \r\n    }\r\n\r\n    subtractWeekOffDate = (workdays) =>\r\n    {\r\n        this.workDateString = moment(this.workDateString, \"DD MMM\").subtract('w', 1).format(\"DD MMM\");\r\n        //this.workDate = moment(workDate).subtract('days', 7).format(\"DD-MM-YYYY\");\r\n        this.setState({date: this.workDateString});\r\n        console.log(this.workDateString + \" substract\");\r\n        //this.weekNumber = moment(this.workDateString, \"DD-MM-YYYY\").isoWeek();\r\n        //this.weekNumber = moment(this.weekNumber).subtract(\"w\",1).week();\r\n        this.weekNumber = moment().day(\"Monday\").week(this.weekNumber).subtract(\"w\", 1).week();\r\n        console.log(this.weekNumber);\r\n\r\n        this.getSchedule(this.weekNumber, user.personId)\r\n        //this.loadSchedule(this.workDayList);\r\n    }\r\n\r\n    \r\n    \r\n\r\n    getSchedule = (weekNumber, employeId) =>{\r\n        console.log(\"in getSchedule \" + weekNumber + \" \" + employeId)\r\n        employeId = 1;\r\n        \r\n        if (!weekNumber || !employeId) {\r\n            alert(\"An error accured, please login agian\")\r\n        }\r\n        else\r\n        {\r\n            Axios.post('http://localhost:4567/work',{\r\n                workDayId: null,\r\n                personId: employeId,\r\n                weekNumber: weekNumber,\r\n                beginTime: null,\r\n                endTime: null,\r\n            })\r\n            .then((Response) =>{\r\n                //console.log(Response);\r\n                if (Response.data) {\r\n                    //console.log(Response.data)\r\n                    workDayList = Response.data;  \r\n                    //this.loadSchedule(Response.data);  \r\n                    return Response.data;                \r\n                }\r\n                else\r\n                {\r\n                    this.workDayList = \"No data\";\r\n                }\r\n            }).then(workdayslist => this.setState({workdayslist}));\r\n        }\r\n    }\r\n\r\n    loadSchedule = (items) => {\r\n        console.log(\"in loadSchedule\");\r\n        \r\n        console.log(items);\r\n\r\n        if (!items || items.lenght === 0) {\r\n            return(\"No data\")\r\n        }\r\n        else\r\n        {\r\n            console.log(\"na eerste if\")\r\n\r\n        return (\r\n            <table>\r\n            <tbody>{items.map(function(item) {\r\n                   \r\n                     return (\r\n                        <tr key = {item.workDayId}>\r\n                            <td> {\"Avalible\"} </td>\r\n                            <td>{item.workDate}</td>\r\n                            <td>{item.beginTime}</td>\r\n                            <td>{item.endTime}</td>\r\n                        </tr>\r\n                      )\r\n                   \r\n                   })}</tbody>\r\n             </table>\r\n          )\r\n        }\r\n    }\r\n\r\n    redirectTo = (props) =>{\r\n        this.props.history.push({pathname: \"/\"+props});\r\n    }\r\n\r\n    logout = () =>{\r\n        cookie.remove('token');\r\n        localStorage.clear();\r\n        this.redirectTo(\"\");\r\n    }\r\n\r\n    render() {  \r\n\r\n        if(this.redirect)\r\n        {\r\n            return <Redirect push to='/' />\r\n        }\r\n        else\r\n        {\r\n\r\n        const worklist = workDayList.map(day => {\r\n           console.log(day.workDate, day.workDayId);\r\n           return(\r\n               /*<li key={day.workDayId}>{day.workDate} , {day.workDayId}</li>*/\r\n                <tr className=\"table-row\"> \r\n                       <td><input type=\"checkbox\" name=\"toggleSwitch\" id=\"toggleSwitch\" />\r\n                       <label class=\"toggle-switch-label\" for=\"toggleSwitch\" >\r\n                       True </label>\r\n                       <span class=\"toggle-switch-inner\"></span>\r\n                       <span class=\"toggle-switch-switch\"></span>\r\n                </td>\r\n                   <td className=\"table-column\">{day.workDate}</td>\r\n                   <td className=\"table-column\">{day.beginTime}</td>\r\n                   <td className=\"table-column\">{day.endTime}</td> \r\n                </tr>\r\n           ) \r\n        })\r\n\r\n        return(\r\n            <view>\r\n                <div className=\"topnavbar\">\r\n                    <div className=\"topnavbar-button\" className=\"whiteText\">\r\n                        <a id=\"hover\" onClick={ () => this.logout()}>Uitloggen</a>\r\n                        <a id=\"hover\" onClick={ () => this.redirectTo(\"account\")}>Account</a>\r\n                        <a id=\"hover\" onClick={ () => this.redirectTo(\"verlof\")}>Verlof</a>\r\n                        <a id=\"hover\" onClick={ () => this.redirectTo(\"groepsrooster\")}>Groepsrooster</a>\r\n                        <a id=\"hover\" onClick={ () => this.redirectTo(\"rooster\")}>Rooster</a>\r\n                        <a id=\"hover\" onClick={ () => this.redirectTo(\"beschikbaarheid\")}>Beschibaarheid</a>\r\n                        <a id=\"hover\" onClick={ () => this.redirectTo(\"home\")}>Home</a>  \r\n                        <b className=\"font-size\">User: {user.firstName}</b>\r\n                  \r\n                    </div>    \r\n                </div>\r\n\r\n                <div className=\"container-center\">\r\n                    <div className=\"item-center\">\r\n                        <button className=\"beschikbaarheid-button\" onClick={ () => this.subtractWeekOffDate(this.workDayList)}> {\" < \"} </button>\r\n                        <button type=\"button\" className=\"beschikbaarheid-button\" onClick={this.addWeekToDate}>  >  </button>\r\n                        \r\n                        <div className=\"text-center-padding\">\r\n                            <h3 className=\"whiteText\">Week van {this.state.date}</h3>\r\n                        </div> \r\n                        \r\n                        <div className=\"item-center\">\r\n                        \r\n                        <table className=\"table-row\"> {/* center table */}\r\n                            <tr className=\"row-table\">\r\n                                <th className=\"table-column\">Date</th>\r\n                                <th className=\"table-column\">Begin</th>\r\n                                <th className=\"table-column\">End</th>\r\n                            </tr>\r\n                            {this.getSchedule, worklist}\r\n                        </table>\r\n                         \r\n                    \r\n                        </div>\r\n                    </div>\r\n                                      \r\n                </div>\r\n                \r\n                {/*<h1>{this.props.location.state.LoggedInUser.firstName}</h1>*/}\r\n           </view>\r\n        )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Beschikbaarheid\r\n\r\n","import React from \"react\";\r\nimport { Redirect } from 'react-router-dom'\r\nimport Axios from \"axios\";\r\n\r\nimport {Cookies} from \"react-cookie\";\r\n\r\nconst cookie = new Cookies();\r\n\r\nvar moment = require('moment');\r\n\r\nvar workDayList = [{\r\n    workDayId: 1,\r\n    workDate: \"27-06-2019\",\r\n    beginTime: \"12:00\",\r\n    endTime: \"22:00\"\r\n},{\r\n    workDayId: 2,\r\n    workDate: \"28-06-2019\",\r\n    beginTime: \"15:00\",\r\n    endTime: \"01:00\"\r\n}\r\n];\r\n\r\nvar user;\r\n\r\nvar currentDate = moment().format(\"DD MMM\");\r\nvar workDate = moment().format(\"MM DD\");\r\nvar workDateString = currentDate;\r\nvar weekday = moment().week();\r\n\r\n\r\nclass Rooster extends React.Component\r\n{\r\n\r\n    constructor(){\r\n        super()\r\n    \r\n\r\n        //Dates\r\n        this.formatDate = moment().format(\"DD MMM\");\r\n        this.workDateString = workDateString;\r\n        this.weekNumber = weekday;\r\n        this.workDate = workDate;\r\n\r\n        this.redirect = false;\r\n        this.logout = this.logout.bind(this);\r\n        \r\n        this.redirectTo = this.redirectTo.bind(this);\r\n        this.getSchedule = this.getSchedule.bind(this);\r\n        this.addWeekToDate = this.addWeekToDate.bind(this);\r\n        this.state = {date: this.workDateString};\r\n        this.loadSchedule = this.loadSchedule.bind(this);\r\n        this.workDayList = workDayList; \r\n\r\n        this.check();\r\n    }\r\n\r\n    check(){\r\n        if(!window.localStorage.user)\r\n        {\r\n            this.redirect = true;\r\n        }\r\n        else\r\n        {\r\n            user = JSON.parse(window.localStorage.user);\r\n\r\n\r\n            console.log(user);\r\n            console.log(cookie.get('token'));\r\n            console.log(user.token);\r\n\r\n        if(user.token !== cookie.get('token'))\r\n        {\r\n            console.log(\"nope\");\r\n            this.redirect = true;\r\n        }\r\n        }\r\n    }\r\n\r\n\r\n    addWeekToDate = (date) =>\r\n    {\r\n        //console.log(currentDate + \" var\");\r\n        //this.workDate = moment(this.workDate).add('days', 7);\r\n        this.workDateString = moment(this.workDateString, \"DD MMM\").add('w', 1).format(\"DD MMM\");\r\n        //console.log(this.workDate + \" work\");\r\n        this.setState({date: this.workDateString});\r\n        console.log(this.workDateString + \" work string\");\r\n        //this.weekNumber = moment(this.workDateString, \"DD-MM-YYYY\").isoWeek();\r\n        //this.weekNumber = moment(this.weekNumber).add(\"w\",1).week();\r\n        this.weekNumber = moment().day(\"Monday\").week(this.weekNumber).add(\"w\", 1).week();\r\n        console.log(this.weekNumber);\r\n\r\n        this.getSchedule(this.weekNumber, user.employeId)\r\n        \r\n    }\r\n\r\n    subtractWeekOffDate = (workdays) =>\r\n    {\r\n        this.workDateString = moment(this.workDateString, \"DD MMM\").subtract('w', 1).format(\"DD MMM\");\r\n        //this.workDate = moment(workDate).subtract('days', 7).format(\"DD-MM-YYYY\");\r\n        this.setState({date: this.workDateString});\r\n        console.log(this.workDateString + \" substract\");\r\n        //this.weekNumber = moment(this.workDateString, \"DD-MM-YYYY\").isoWeek();\r\n        //this.weekNumber = moment(this.weekNumber).subtract(\"w\",1).week();\r\n        this.weekNumber = moment().day(\"Monday\").week(this.weekNumber).subtract(\"w\", 1).week();\r\n        console.log(this.weekNumber);\r\n\r\n        this.getSchedule(this.weekNumber, user.employeId)\r\n        //this.loadSchedule(this.workDayList);\r\n    }\r\n\r\n    testtable() {\r\n        var workD = this.getSchedule(this.weekNumber , user.employeId);\r\n        \r\n        return(\r\n            <table>\r\n            <tbody>{workD.map(function(item) {\r\n                   \r\n                     return (\r\n                        <tr key = {item.workDayId}>\r\n                            <td>{item.workDate}</td>\r\n                            <td>{item.beginTime}</td>\r\n                            <td>{item.endTime}</td>\r\n                        </tr>\r\n                      )\r\n                   })}</tbody>\r\n             </table>\r\n        )\r\n    }\r\n    \r\n\r\n    getSchedule = (weekNumber, employeId) =>{\r\n        console.log(\"in getSchedule \" + weekNumber + \" \" + employeId)\r\n        employeId = 1;\r\n        if (!weekNumber || !employeId) {\r\n            alert(\"An error accured, please login agian\")\r\n        }\r\n        else\r\n        {\r\n            Axios.post('http://localhost:4567/work',{\r\n                workDayId: null,\r\n                personId: employeId,\r\n                weekNumber: weekNumber,\r\n                beginTime: null,\r\n                endTime: null,\r\n            })\r\n            .then((Response) =>{\r\n                //console.log(Response);\r\n                if (Response.data) {\r\n                    //console.log(Response.data)\r\n                    workDayList = Response.data;  \r\n                    //this.loadSchedule(Response.data);  \r\n                    return Response.data;                \r\n                }\r\n                else\r\n                {\r\n                    this.workDayList = \"No data\";\r\n                }\r\n            }).then(workdayslist => this.setState({workdayslist}));\r\n        }\r\n    }\r\n\r\n    loadSchedule = (items) => {\r\n        console.log(\"in loadSchedule\");\r\n        \r\n        console.log(items);\r\n\r\n        if (!items || items.lenght === 0) {\r\n            return(\"No data\")\r\n        }\r\n        else\r\n        {\r\n            console.log(\"na eerste if\")\r\n\r\n        return (\r\n            <table>\r\n            <tbody>{items.map(function(item) {\r\n                   \r\n                     return (\r\n                        <tr key = {item.workDayId}>\r\n                            <td>{item.workDate}</td>\r\n                            <td>{item.beginTime}</td>\r\n                            <td>{item.endTime}</td>\r\n                        </tr>\r\n                      )\r\n                   \r\n                   })}</tbody>\r\n             </table>\r\n          )\r\n        }\r\n    }\r\n\r\n    redirectTo = (props, LoggedInUser) =>{\r\n        this.props.history.push({pathname: \"/\"+props});\r\n    }\r\n\r\n    logout = () =>{\r\n        cookie.remove('token');\r\n        localStorage.clear();\r\n        this.redirectTo(\"\");\r\n    }\r\n\r\n    render() {  \r\n\r\n        if(this.redirect)\r\n        {\r\n            return <Redirect push to='/' />\r\n        }\r\n        else\r\n        {\r\n\r\n\r\n        const worklist = workDayList.map(day => {\r\n           console.log(day.workDate, day.workDayId);\r\n           return(\r\n               /*<li key={day.workDayId}>{day.workDate} , {day.workDayId}</li>*/\r\n                <tr className=\"table-row\"> \r\n                   <td className=\"table-column\">{day.workDate}</td>\r\n                   <td className=\"table-column\">{day.beginTime}</td>\r\n                   <td className=\"table-column\">{day.endTime}</td> \r\n                </tr>\r\n           ) \r\n        })\r\n\r\n        return(\r\n            <view>\r\n                <div className=\"topnavbar\">\r\n                    <div className=\"topnavbar-button\" className=\"whiteText\">\r\n                        <a id=\"hover\" onClick={ () => this.logout()}>Uitloggen</a>\r\n                        <a id=\"hover\" onClick={ () => this.redirectTo(\"account\")}>Account</a>\r\n                        <a id=\"hover\" onClick={ () => this.redirectTo(\"verlof\")}>Verlof</a>\r\n                        <a id=\"hover\" onClick={ () => this.redirectTo(\"groepsrooster\")}>Groepsrooster</a>\r\n                        <a id=\"hover\" onClick={ () => this.redirectTo(\"rooster\")}>Rooster</a>\r\n                        <a id=\"hover\" onClick={ () => this.redirectTo(\"beschikbaarheid\")}>Beschibaarheid</a>\r\n                        <a id=\"hover\" onClick={ () => this.redirectTo(\"home\")}>Home</a>  \r\n                        <b className=\"font-size\">User: {user.firstName}</b>\r\n                  \r\n                    </div>    \r\n                </div>\r\n\r\n                <div className=\"container-center\">\r\n                    <div className=\"item-center\">\r\n                        <button className=\"beschikbaarheid-button\" onClick={ () => this.subtractWeekOffDate(this.workDayList)}> {\" < \"} </button>\r\n                        <button type=\"button\" className=\"beschikbaarheid-button\" onClick={this.addWeekToDate}>  >  </button>\r\n                        \r\n                        <div className=\"text-center-padding\">\r\n                            <h3 className=\"whiteText\">Week van {this.state.date}</h3>\r\n                        </div> \r\n                        \r\n                        <div className=\"item-center\">\r\n                        <center>\r\n                        <table className=\"table-row\"> {/* center table */}\r\n                            <tr className=\"row-table\">\r\n                                <th className=\"table-column\">Date</th>\r\n                                <th className=\"table-column\">Begin</th>\r\n                                <th className=\"table-column\">End</th>\r\n                            </tr>\r\n                            {this.getSchedule, worklist}\r\n                        </table>\r\n                        </center>\r\n                    \r\n                        </div>\r\n                    </div>\r\n                                      \r\n                </div>\r\n                \r\n                {/*<h1>{this.props.location.state.LoggedInUser.firstName}</h1>*/}\r\n           </view>\r\n        )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Rooster","import React from \"react\";\r\nimport  { Redirect } from 'react-router-dom'\r\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\r\nimport 'react-day-picker/lib/style.css';\r\n\r\nimport Axios from \"axios\";\r\n\r\nimport {Cookies} from \"react-cookie\";\r\n\r\nconst cookie = new Cookies();\r\n\r\n\r\nvar user;\r\n\r\n\r\n\r\nvar verlofList = [{\r\n    personId: 1,\r\n    beginDate: \"27-06-2020\",\r\n    endDate: \"28-06-2020\"\r\n}];\r\n\r\nconst selectedBeginDate = undefined;\r\nconst selectedEndDate = undefined;\r\n\r\n\r\nclass Verlof extends React.Component {\r\n\r\n    constructor() {\r\n        super()\r\n\r\n\r\n        this.redirectTo = this.redirectTo.bind(this);\r\n\r\n        this.redirect = false;\r\n        this.logout = this.logout.bind(this);\r\n\r\n        this.request = this.request.bind(this);\r\n        this.handleBeginDayChange = this.handleBeginDayChange.bind(this);\r\n        this.handleEndDayChange = this.handleEndDayChange.bind(this);\r\n        this.selectedBeginDate = selectedBeginDate;\r\n        this.selectedEndDate = selectedEndDate;\r\n        this.state = {\r\n            selectedDay: undefined,\r\n            test: 1\r\n        };\r\n\r\n        this.verlofList = verlofList;\r\n        this.check();\r\n    }\r\n    \r\n    check(){\r\n        if(!window.localStorage.user)\r\n        {\r\n            this.props.history.push({pathname: \"/\"});\r\n        }\r\n        else\r\n        {\r\n            user = JSON.parse(window.localStorage.user);\r\n\r\n            ///Waarom type error bij deze if statement\r\n\r\n            console.log(user);\r\n            console.log(cookie.get('token'));\r\n            console.log(user.token);\r\n\r\n        if(user.token !== cookie.get('token'))\r\n        {\r\n            console.log(\"nope\");\r\n            this.redirect = true;\r\n        }\r\n        }\r\n    }\r\n\r\n    request(beginDate, endDate)\r\n    {\r\n        console.log(beginDate, endDate);\r\n\r\n        var selectedBegin = new Date(beginDate);\r\n        var now = new Date();\r\n        var selectedEnd = new Date(endDate);\r\n\r\n        console.log(selectedBegin);\r\n        console.log(selectedEnd);\r\n        console.log(now);\r\n\r\n        var personID = user.personId;\r\n        if (!beginDate) {\r\n            alert(\"Begin date not set\")\r\n            this.state.test = 0;\r\n        }\r\n        else if (!endDate) {\r\n            alert(\"End date not set\")\r\n            this.state.test = 0;\r\n        }\r\n        else if (selectedBegin < now)\r\n        {\r\n            alert(\"Begin date can't be in the past\")\r\n            this.state.test = 0;\r\n        }\r\n        else if (selectedEnd < now)\r\n        {\r\n            alert(\"End date can't be in the past\")\r\n            this.state.test = 0;\r\n        }\r\n        else if (selectedBegin < selectedEnd)\r\n        {\r\n            alert(\"End date can't be before the begin date\")\r\n            this.state.test = 0;\r\n        }\r\n        /*else if (!personID)\r\n        {\r\n            this.redirectTo(\"uitloggen\", this.props.location.state.LoggedInUser)\r\n        }*/\r\n        else\r\n        {\r\n            Axios.post('http://localhost:4567/vacation', {\r\n                personId: personID,\r\n                beginDate: beginDate,\r\n                endDate: endDate\r\n\r\n            }).then((Response) => {\r\n                if  (Response.data)\r\n                {\r\n                    verlofList = Response.data;\r\n                    return Response.data;\r\n                }\r\n                else\r\n                {\r\n                    this.verlofList = \"no data\";\r\n                }\r\n                \r\n            })\r\n            .then(verlofList => this.setState({verlofList}));\r\n\r\n        }\r\n    }\r\n\r\n\r\n    handleBeginDayChange(selectedBeginDate, modifiers, DayPickerInput) {\r\n        const input = DayPickerInput.getInput();\r\n        this.setState({\r\n            selectedBeginDate,\r\n            isEmptyBeginDate: !input.value.trim(),\r\n            isDisabledBeginDate: modifiers.disabled === true,\r\n        })\r\n\r\n        this.selectedBeginDate = selectedBeginDate.toLocaleDateString();\r\n        console.log(this.selectedBeginDate);\r\n    }\r\n\r\n    handleEndDayChange(selectedEndDate, modifiers, DayPickerInput) {\r\n        const input = DayPickerInput.getInput();\r\n\r\n        console.log(selectedEndDate.toLocaleDateString());\r\n        \r\n        var selected = new Date(selectedEndDate.toLocaleDateString());\r\n        var now = new Date()\r\n        console.log(selected);\r\n        console.log(now);\r\n\r\n\r\n            this.setState({\r\n            selectedEndDate,\r\n            isEmptyEndDate: !input.value.trim(),\r\n            isDisabledEndDate: modifiers.disabled === true,\r\n        })\r\n\r\n        this.selectedEndDate = selectedEndDate.toLocaleDateString();\r\n        console.log(this.selectedEndDate);\r\n        \r\n        \r\n        \r\n    }\r\n\r\n\r\n    redirectTo = (props) => {\r\n        this.props.history.push({ pathname: \"/\" + props});\r\n    }\r\n\r\n    logout = () =>{\r\n        cookie.remove('token');\r\n        localStorage.clear();\r\n        this.redirectTo(\"\");\r\n    }\r\n\r\n    render() {\r\n\r\n        if(this.redirect)\r\n        {\r\n            return <Redirect push to='/' />\r\n        }\r\n        else\r\n        {\r\n\r\n        const { selectedBeginDate, isDisabledBeginDate, isEmptyBeginDate } = this.state;\r\n        const { selectedEndDate, isDisabledEndDate, isEmptyEndDate } = this.state;\r\n\r\n        const verlof = verlofList.map(day => {\r\n            console.log(day.personId, day.beginDate, day.endDate);\r\n            return(\r\n                <tr className=\"table-row\">\r\n                    <td className=\"table-column\"> {day.beginDate}</td>\r\n                    <td className=\"table-column\"> {day.endDate}</td>\r\n                </tr>\r\n            )\r\n        })\r\n\r\n        return (\r\n            <view>\r\n                <div className=\"topnavbar\">\r\n                    <div className=\"topnavbar-button\" className=\"whiteText\">\r\n                        <a id=\"hover\" onClick={() => this.logout()}>Uitloggen</a>\r\n                        <a id=\"hover\" onClick={() => this.redirectTo(\"account\")}>Account</a>\r\n                        <a id=\"hover\" onClick={() => this.redirectTo(\"verlof\")}>Verlof</a>\r\n                        <a id=\"hover\" onClick={() => this.redirectTo(\"groepsrooster\")}>Groepsrooster</a>\r\n                        <a id=\"hover\" onClick={() => this.redirectTo(\"rooster\")}>Rooster</a>\r\n                        <a id=\"hover\" onClick={() => this.redirectTo(\"beschikbaarheid\")}>Beschibaarheid</a>\r\n                        <a id=\"hover\" onClick={() => this.redirectTo(\"home\")}>Home</a>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"container-center\">\r\n                    <div className=\"item-center\">\r\n                        <center>\r\n                            <table>\r\n                                <tr>\r\n                                    <td className=\"table-column-verlof\">\r\n                                        <p>\r\n                                            {isEmptyBeginDate && 'Please type or pick a day'}\r\n                                            {!isEmptyBeginDate && !selectedBeginDate && 'This day is invalid'}\r\n                                            {selectedBeginDate &&\r\n                                                `From ${selectedBeginDate.toLocaleDateString()}`}\r\n                                        </p>\r\n                                        <DayPickerInput\r\n                                            format=\"NL\"\r\n                                            value={selectedBeginDate}\r\n                                            onDayChange={this.handleBeginDayChange}\r\n                                            dayPickerProps={{\r\n                                                selectedDays: selectedBeginDate,\r\n                                            }}\r\n                                        />\r\n                                    </td>\r\n\r\n                                    <td className=\"table-column-verlof\">\r\n                                        <p>\r\n                                            {isEmptyEndDate && 'Please type or pick a day'}\r\n                                            {!isEmptyEndDate && !selectedEndDate && 'This day is invalid'}\r\n                                            {selectedEndDate &&\r\n                                                `Till ${selectedEndDate.toLocaleDateString()}`}\r\n                                        </p>\r\n                                        <DayPickerInput\r\n                                            format=\"NL\"\r\n                                            value={selectedEndDate}\r\n                                            onDayChange={this.handleEndDayChange}\r\n                                            dayPickerProps={{\r\n                                                selectedDays: selectedEndDate,\r\n                                            }}\r\n                                        />\r\n                                    </td>\r\n\r\n                                    <td>\r\n                                        <div className=\"top-space\">\r\n                                            <a>\r\n                                                <button className=\"verlof-button\" onClick={() => this.request(this.selectedBeginDate, this.selectedEndDate)}>Request</button>\r\n                                            </a>\r\n                                        </div>\r\n                                    </td>\r\n\r\n                                </tr>\r\n                                <table>\r\n                                    <tr className=\"row-table\">\r\n                                        <th className=\"table-column\">From</th>\r\n                                        <th className=\"table-column\">Till</th>\r\n                                    </tr>\r\n                                    {verlof}\r\n                                </table>\r\n                                \r\n\r\n                            </table>\r\n\r\n                            {/*TODO:   Save button for verlof aanvragen\r\n                                    Verlof ophalen bij inladen pagina van persoon\r\n                                    (in table net als rooster laten zien)\r\n                                    Verlof versturen naar back-end */}\r\n\r\n                        </center>\r\n                    </div>\r\n                </div>\r\n            </view>\r\n        )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Verlof","import React from \"react\";\r\nimport { Redirect } from 'react-router-dom'\r\nimport Axios from \"axios\";\r\n\r\nimport {Cookies} from \"react-cookie\";\r\n\r\nconst cookie = new Cookies();\r\n\r\nvar user;\r\nvar userID;\r\nvar old_password;\r\nvar new_password;\r\nvar confirmed_new_password;\r\nvar result = null;\r\n\r\nclass Account extends React.Component\r\n{\r\n\r\n    constructor(props){\r\n        super(props)\r\n        \r\n        this.redirect = false;\r\n        this.logout = this.logout.bind(this);\r\n        \r\n        this.redirectTo = this.redirectTo.bind(this);\r\n        this.changePasswordInfo = this.changePasswordInfo.bind(this);\r\n        this.changePassword = this.changePassword.bind(this);\r\n\r\n        this.state = {\r\n            test: 1\r\n        };\r\n        this.result = result;\r\n        this.check();\r\n    }\r\n\r\n    check(){\r\n        if(!window.localStorage.user)\r\n        {\r\n            this.redirect = true;\r\n        }\r\n        else\r\n        {\r\n            user = JSON.parse(window.localStorage.user);\r\n\r\n            console.log(user);\r\n            console.log(cookie.get('token'));\r\n            console.log(user.token);\r\n\r\n        if(user.token !== cookie.get('token'))\r\n        {\r\n            console.log(\"nope\");\r\n            this.redirect = true;\r\n        }\r\n    }\r\n    }\r\n    \r\n\r\n    redirectTo = (props) =>{\r\n        this.props.history.push({pathname: \"/\"+props});\r\n    }\r\n\r\n    logout = () =>{\r\n        cookie.remove('token');\r\n        localStorage.clear();\r\n        this.redirectTo(\"\");\r\n    }\r\n\r\n    changePasswordInfo(){\r\n        userID = user.userId;\r\n        old_password = document.getElementById(\"oldPassword\").value;\r\n        new_password = document.getElementById(\"newPassword\").value;\r\n        confirmed_new_password = document.getElementById(\"confirmNewPassword\").value;\r\n    \r\n\r\n        console.log(old_password);\r\n        console.log(new_password);\r\n        console.log(confirmed_new_password);\r\n\r\n        this.result = this.changePassword(userID ,old_password, new_password, confirmed_new_password);\r\n        \r\n        //TODO: Testen feedback systeem\r\n\r\n        if (this.result === \"True\") {\r\n            alert(\"Password changed succesfull\")\r\n        }\r\n        else\r\n        {\r\n            alert(\"Failed to changed password\")\r\n        }\r\n        \r\n    }\r\n\r\n    changePassword = (userID, oldPass, newPass, confPass) => {\r\n\r\n        console.log(oldPass, newPass, confPass);\r\n\r\n        if (!oldPass) {\r\n            alert(\"Old password is empty\")\r\n            this.state.test = 0;\r\n        }\r\n        else if(!newPass)\r\n        {\r\n            alert(\"New password is empty\")\r\n            this.state.test = 0;\r\n        }\r\n        else if(!confPass)\r\n        {\r\n            alert(\"Confirm password is empty\")\r\n            this.state.test = 0;\r\n        }\r\n        else\r\n        {\r\n            /*const changePassModel = {\r\n                userId: userID,\r\n                oldPassword: oldPass,\r\n                newPassword: newPass,\r\n                confNewPassword: confPass,\r\n            }*/\r\n\r\n            Axios.put('http://localhost:4567/changepassword', {\r\n                userId: userID,\r\n                oldPassword: oldPass,\r\n                newPassword: newPass,\r\n                confNewPassword: confPass,\r\n\r\n                \r\n            }).then((Response) => {\r\n                \r\n                console.log(Response.data)\r\n\r\n                if (Response.data)\r\n                {\r\n                    return Response.data;\r\n                }\r\n            })\r\n            \r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        //TODO: Create add user if admin\r\n\r\n        if(this.redirect)\r\n        {\r\n            return <Redirect push to='/' />\r\n        }\r\n        else\r\n        {\r\n\r\n        return(\r\n            <view>\r\n                <div className=\"topnavbar\">\r\n                    <div className=\"topnavbar-button\" className=\"whiteText\">\r\n                    <a id=\"hover\" onClick={ () => this.logout()}>Uitloggen</a>\r\n                        <a id=\"hover\" onClick={ () => this.redirectTo(\"account\")}>Account</a>\r\n                        <a id=\"hover\" onClick={ () => this.redirectTo(\"verlof\")}>Verlof</a>\r\n                        <a id=\"hover\" onClick={ () => this.redirectTo(\"groepsrooster\")}>Groepsrooster</a>\r\n                        <a id=\"hover\" onClick={ () => this.redirectTo(\"rooster\")}>Rooster</a>\r\n                        <a id=\"hover\" onClick={ () => this.redirectTo(\"beschikbaarheid\")}>Beschibaarheid</a>\r\n                        <a id=\"hover\" onClick={ () => this.redirectTo(\"home\")}>Home</a>  \r\n                    </div>    \r\n                </div>\r\n\r\n                <div id=\"input-center\" class=\"input-center\">\r\n\r\n                        <div className=\"login-center\">\r\n                            <p>Change password</p>\r\n                        </div>\r\n\r\n                        <div className=\"text-input\">\r\n                            <input name=\"oldPassword\" type=\"password\" placeholder=\"Enter old password\" class=\"text-line\" id=\"oldPassword\" required pattern=\"\\S+\"></input> {/*pattern == cant have white space*/}\r\n                        </div>\r\n\r\n                        <br></br>\r\n\r\n                        <div className=\"text-input\">\r\n                            <input name=\"newPassword\" type=\"password\" placeholder=\"Enter new password\" class=\"text-line\" id=\"newPassword\" required pattern=\"\\S+\"></input> \r\n                        </div>\r\n\r\n                        <br></br>\r\n\r\n                        <div className=\"text-input\">\r\n                            <input name=\"confirmNewPassword\" type=\"password\" placeholder=\"Confirm new password\" class=\"text-line\" id=\"confirmedNewPassword\" required pattern=\"\\S+\"></input> \r\n                        </div>\r\n                        <div className=\"login-center\">\r\n                            {//<button type=\"button\" className=\"login-button\" onClick = {function(event) {login_info()}}>Login </button>*/\r\n                                //<button type=\"button\" className=\"login-button\" onClick={function () { alert('Dit is een login button'); }}>Login </button>*/\r\n                                //<button type=\"button\" className=\"login-button\" onClick=\"loginInfo()\" id=\"loginButton\">Login </button>*/\r\n                            }\r\n                            <button type=\"button\" className=\"login-button\" onClick={this.changePasswordInfo}>Login</button>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n           </view>\r\n        )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Account","import React from \"react\";\r\nimport  { Redirect } from 'react-router-dom'\r\nimport Axios from \"axios\";\r\n\r\nimport {Cookies} from \"react-cookie\";\r\n\r\nconst cookie = new Cookies();\r\n\r\nvar moment = require('moment');\r\n\r\nvar workDayList = [{\r\n    workDayId: 1,\r\n    workDate: \"27-06-2019\",\r\n    beginTime: \"12:00\",\r\n    endTime: \"22:00\",\r\n    firstName: \"Medewerker\",\r\n    lastName: \"1\"\r\n},{\r\n    workDayId: 2,\r\n    workDate: \"28-06-2019\",\r\n    beginTime: \"15:00\",\r\n    endTime: \"01:00\",\r\n    firstName: \"Medewerker\",\r\n    lastName: \"2\"\r\n}\r\n];\r\n\r\nvar user;\r\n\r\nvar currentDate = moment().format(\"DD-MM-YYYY\");\r\nvar workDate = moment().format(\"MM-DD-YYYY\");\r\nvar workDateString = currentDate;\r\nvar weekday = moment().week();\r\n\r\n\r\nclass Groepsrooster extends React.Component\r\n{\r\n\r\n    constructor(){\r\n        super()\r\n\r\n\r\n        //Dates\r\n        this.formatDate = moment().format(\"DD MM-YYYY\");\r\n        this.workDateString = workDateString;\r\n        this.weekNumber = weekday;\r\n        this.workDate = workDate;\r\n\r\n        this.redirect = false;\r\n        this.logout = this.logout.bind(this);\r\n\r\n        this.redirectTo = this.redirectTo.bind(this);\r\n        this.getGroupSchedule = this.getGroupSchedule.bind(this);\r\n        this.addDayToDate = this.addDayToDate.bind(this);\r\n        this.state = {date: this.workDateString};\r\n        this.loadSchedule = this.loadSchedule.bind(this);\r\n        this.workDayList = workDayList;\r\n\r\n        this.check();\r\n    }\r\n\r\n    check(){\r\n        if(!window.localStorage.user)\r\n        {\r\n            this.redirect = true;\r\n        }\r\n        else\r\n        {\r\n            user = JSON.parse(window.localStorage.user);\r\n\r\n            console.log(user);\r\n            console.log(cookie.get('token'));\r\n            console.log(user.token);\r\n\r\n        if(user.token !== cookie.get('token'))\r\n        {\r\n            console.log(\"nope\");\r\n            this.redirect = true;\r\n        }\r\n    }\r\n    }\r\n\r\n    addDayToDate = (date) =>\r\n    {\r\n        this.workDateString = moment(this.workDateString, \"DD MM YYYY\").add('d', 1).format(\"DD-MM-YYYY\");\r\n        this.setState({date: this.workDateString});\r\n        console.log(this.workDateString + \" work string\");\r\n        // this.weekNumber = moment().day(\"Monday\").week(this.weekNumber).add(\"d\", 1).week();\r\n        // console.log(this.weekNumber);\r\n\r\n        this.getGroupSchedule(this.workDateString, user.personId)\r\n    }\r\n\r\n    subtractDayOffDate = (workdays) =>\r\n    {\r\n        this.workDateString = moment(this.workDateString, \"DD MM YYYY\").subtract('d', 1).format(\"DD-MM-YYYY\");\r\n        this.setState({date: this.workDateString});\r\n        console.log(this.workDateString + \" substract\");\r\n        // this.weekNumber = moment().day(\"Monday\").week(this.weekNumber).subtract(\"d\", 1).week();\r\n        // console.log(this.weekNumber);\r\n\r\n        this.getGroupSchedule(this.workDateString, user.personId)\r\n    }\r\n\r\n    testtable() {\r\n        var workD = this.getGroupSchedule(this.workDateString , 1);\r\n        \r\n        return(\r\n            <table>\r\n                <tbody>{workD.map(function(item) {\r\n                   \r\n                    return (\r\n                        <tr key = {item.workDayId}>\r\n                            <td>{item.workDate}</td>\r\n                            <td>{item.beginTime}</td>\r\n                            <td>{item.endTime}</td>\r\n                            <td>{item.lastName}, {item.firstName}</td>\r\n                        </tr>\r\n                    )\r\n            })}</tbody>\r\n            </table>\r\n        )\r\n    }\r\n    \r\n\r\n    getGroupSchedule = (workDay, employeId) =>{\r\n       \r\n        console.log(\"in getGroupSchedule \" + workDay + \" \" + employeId)\r\n\r\n        if (!workDay || !employeId) {\r\n            alert(\"An error accured, please login agian\")\r\n        }\r\n        else\r\n        {\r\n            Axios.post('http://localhost:4567/group',{\r\n                workDayId: null,\r\n                personId: employeId, //Waarom dit Inner join in back-end\r\n                weekNumber: null,\r\n                workDate: workDay,\r\n                beginTime: null,\r\n                endTime: null,\r\n            })\r\n            .then((Response) =>{\r\n                console.log(Response);\r\n                if (Response.data) {\r\n                    \r\n                    workDayList = Response.data;  \r\n                    //this.loadSchedule(Response.data);  \r\n                    return Response.data;                \r\n                }\r\n                else\r\n                {\r\n                    this.workDayList = \"No data\";\r\n                }\r\n            }).then(workdayslist => this.setState({workdayslist}));\r\n        }\r\n    }\r\n\r\n    loadSchedule = (items) => {\r\n        console.log(\"in loadSchedule\");\r\n        \r\n        console.log(items);\r\n\r\n        if (!items || items.lenght === 0) {\r\n            return(\"No data\")\r\n        }\r\n        else\r\n        {\r\n            console.log(\"na eerste if\")\r\n\r\n        return (\r\n            <table>\r\n            <tbody>{items.map(function(item) {\r\n                   \r\n                     return (\r\n                        <tr key = {item.workDayId}>\r\n                            <td>{item.workDate}</td>\r\n                            <td>{item.beginTime}</td>\r\n                            <td>{item.endTime}</td>\r\n                            <td>{item.lastName}, {item.firstName}</td>\r\n                        </tr>\r\n                      )\r\n                   \r\n                   })}</tbody>\r\n             </table>\r\n          )\r\n        }\r\n    }\r\n\r\n    redirectTo = (props, LoggedInUser) =>{\r\n        this.props.history.push({pathname: \"/\"+props});\r\n    }\r\n\r\n    logout = () =>{\r\n        cookie.remove('token');\r\n        localStorage.clear();\r\n        this.redirectTo(\"\");\r\n    }\r\n\r\n    render() {  \r\n\r\n        if(this.redirect)\r\n        {\r\n            return <Redirect push to='/' />\r\n        }\r\n        else\r\n        {\r\n\r\n        const worklist = workDayList.map(day => {\r\n           console.log(day.workDate, day.workDayId);\r\n           return(\r\n               /*<li key={day.workDayId}>{day.workDate} , {day.workDayId}</li>*/\r\n                <tr className=\"table-row\"> \r\n                   <td className=\"table-column\">{day.workDate}</td>\r\n                   <td className=\"table-column\">{day.beginTime}</td>\r\n                   <td className=\"table-column\">{day.endTime}</td>\r\n                   <td className=\"table-column\">{day.lastName}, {day.firstName}</td>  \r\n                </tr>\r\n           ) \r\n        })\r\n\r\n        return(\r\n            <view>\r\n                <div className=\"topnavbar\">\r\n                    <div className=\"topnavbar-button\" className=\"whiteText\">\r\n                        <a id=\"hover\" onClick={ () => this.logout()}>Uitloggen</a>\r\n                        <a id=\"hover\" onClick={ () => this.redirectTo(\"account\")}>Account</a>\r\n                        <a id=\"hover\" onClick={ () => this.redirectTo(\"verlof\")}>Verlof</a>\r\n                        <a id=\"hover\" onClick={ () => this.redirectTo(\"groepsrooster\")}>Groepsrooster</a>\r\n                        <a id=\"hover\" onClick={ () => this.redirectTo(\"rooster\")}>Rooster</a>\r\n                        <a id=\"hover\" onClick={ () => this.redirectTo(\"beschikbaarheid\")}>Beschibaarheid</a>\r\n                        <a id=\"hover\" onClick={ () => this.redirectTo(\"home\")}>Home</a>  \r\n                        <b className=\"font-size\">User: {user.firstName}</b>\r\n                  \r\n                    </div>    \r\n                </div>\r\n\r\n                <div className=\"container-center\">\r\n                    <div className=\"item-center\">\r\n                        <button className=\"beschikbaarheid-button\" onClick={ () => this.subtractDayOffDate(this.workDayList)}> {\" < \"} </button>\r\n                        <button type=\"button\" className=\"beschikbaarheid-button\" onClick={this.addDayToDate}>  >  </button>\r\n                        \r\n                        <div className=\"text-center-padding\">\r\n                            <h3 className=\"whiteText\">{this.state.date}</h3>\r\n                        </div> \r\n                        \r\n                        <div className=\"item-center\">\r\n                        <center>\r\n                        <table className=\"table-row\"> {/* center table */}\r\n                            <tr className=\"row-table\">\r\n                                <th className=\"table-column\">Date</th>\r\n                                <th className=\"table-column\">Begin time</th>\r\n                                <th className=\"table-column\">End time</th>\r\n                                <th className=\"table-column\">Worker</th>\r\n                            </tr>\r\n                            {this.getGroupSchedule, worklist}\r\n                        </table>\r\n                        </center>\r\n                        </div>\r\n                    </div>\r\n                                      \r\n                </div>\r\n                \r\n                {/*<h1>{this.props.location.state.LoggedInUser.firstName}</h1>*/}\r\n           </view>\r\n        )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Groepsrooster","import React from \"react\";\r\nimport ReactDOM from 'react-dom';\r\nimport { Route, BrowserRouter as Router } from 'react-router-dom'\r\nimport App from './App';\r\nimport Home from './Home';\r\nimport Beschikbaarheid from './Beschikbaarheid';\r\nimport Rooster from './Rooster';\r\nimport Verlof from './Verlof';\r\nimport Account from './Account';\r\nimport Groepsrooster from './Groepsrooster';\r\nimport './index.css';\r\nimport { CookiesProvider } from 'react-cookie';\r\n\r\n//Bootstrap\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\r\n\r\nconst routing = (\r\n    <Router>\r\n    <App />\r\n    {/*<div>\r\n      <Route exact path=\"/\" component={App} />\r\n      <Route path=\"/Home\" component={Home} />\r\n      <Route path=\"/Beschikbaarheid\" component={Beschikbaarheid} />\r\n      <Route path=\"/Rooster\" component={Rooster} />\r\n      <Route path=\"/Groepsrooster\" component={Groepsrooster} />\r\n      <Route path=\"/Verlof\" component={Verlof} />\r\n      <Route path=\"/Account\" component={Account} />\r\n    </div>*/}\r\n  </Router>\r\n)\r\n\r\n\r\nReactDOM.render(routing, document.getElementById('root'))\r\n\r\n//ReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}